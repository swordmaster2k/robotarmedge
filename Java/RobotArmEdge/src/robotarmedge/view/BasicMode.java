package robotarmedge.view;

import javax.swing.JToggleButton;
import javax.usb.event.UsbDeviceDataEvent;
import javax.usb.event.UsbDeviceErrorEvent;
import javax.usb.event.UsbDeviceEvent;
import javax.usb.event.UsbDeviceListener;
import robotarmedge.device.UsbRobotArm;
import robotarmedge.event.RobotArmChangedEvent;
import robotarmedge.event.RobotArmChangeListener;

/**
 * 
 * 
 * @author Joshua Michael Daly
 */
public class BasicMode extends javax.swing.JFrame implements UsbDeviceListener,
        RobotArmChangeListener
{
    private UsbRobotArm usbRobotArm;
    
    /*
     * ************************************************************************* 
     * Public Constructors
     * *************************************************************************
     */
    
    /**
     * Creates new form BasicMode
     */
    public BasicMode()
    {
        initComponents();
    }
    
    /**
     * Creates new form BasicMode
     * 
     * @param robotArm
     */
    public BasicMode(UsbRobotArm robotArm)
    {
        initComponents();
        this.usbRobotArm = robotArm;
        this.usbRobotArm.addRobotArmChangeListener(this);
        
        if (this.usbRobotArm.isAttached())
        {
            this.armStatusLabel.setText("Connected");
        }
    }
    
    /*
     * ************************************************************************* 
     * Public Methods
     * *************************************************************************
     */

    /**
     * 
     * 
     * @param ude 
     */
    @Override
    public void usbDeviceDetached(UsbDeviceEvent ude)
    {
        throw new UnsupportedOperationException("Not supported yet."); 
    }

    @Override
    public void errorEventOccurred(UsbDeviceErrorEvent udee)
    {
        throw new UnsupportedOperationException("Not supported yet."); 
    }

    @Override
    public void dataEventOccurred(UsbDeviceDataEvent udde)
    {
        throw new UnsupportedOperationException("Not supported yet."); 
    }
    
    @Override
    public void robotArmAttached(RobotArmChangedEvent race)
    {
        this.armStatusLabel.setText("Connected");
    }
    
    @Override
    public void robotArmDetached(RobotArmChangedEvent race)
    {
        this.armStatusLabel.setText("Not Connected");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        closeGripperButton = new javax.swing.JButton();
        openGripperButton = new javax.swing.JButton();
        wristDownButton = new javax.swing.JButton();
        wristUpButton = new javax.swing.JButton();
        elbowUpButton = new javax.swing.JButton();
        elbowDownButton = new javax.swing.JButton();
        shoulderDownButton = new javax.swing.JButton();
        shoulderUpButton = new javax.swing.JButton();
        baseAntiClockwiseButton = new javax.swing.JButton();
        baseClockwiseButton = new javax.swing.JButton();
        toggleModeButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        basicModeLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        armImagePanel = new javax.swing.JPanel();
        outputLabel = new javax.swing.JLabel();
        armStatusLabel = new javax.swing.JLabel();
        lightToggleButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Basic Mode");
        setMaximumSize(new java.awt.Dimension(790, 565));
        setMinimumSize(new java.awt.Dimension(790, 565));
        setName("BasicModeFrame"); // NOI18N
        setResizable(false);

        closeGripperButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-090.png"))); // NOI18N
        closeGripperButton.setText("W");
        closeGripperButton.setToolTipText("Close Gripper");
        closeGripperButton.setMaximumSize(new java.awt.Dimension(70, 50));
        closeGripperButton.setMinimumSize(new java.awt.Dimension(70, 50));
        closeGripperButton.setPreferredSize(new java.awt.Dimension(70, 50));
        closeGripperButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                closeGripperButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                closeGripperButtonMouseReleased(evt);
            }
        });

        openGripperButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-270.png"))); // NOI18N
        openGripperButton.setText("S");
        openGripperButton.setToolTipText("Open Gripper");
        openGripperButton.setMaximumSize(new java.awt.Dimension(70, 50));
        openGripperButton.setMinimumSize(new java.awt.Dimension(70, 50));
        openGripperButton.setPreferredSize(new java.awt.Dimension(70, 50));
        openGripperButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                openGripperButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                openGripperButtonMouseReleased(evt);
            }
        });

        wristDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-270.png"))); // NOI18N
        wristDownButton.setText("D");
        wristDownButton.setToolTipText("Wrist Down");
        wristDownButton.setMaximumSize(new java.awt.Dimension(70, 50));
        wristDownButton.setMinimumSize(new java.awt.Dimension(70, 50));
        wristDownButton.setPreferredSize(new java.awt.Dimension(70, 50));
        wristDownButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                wristDownButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                wristDownButtonMouseReleased(evt);
            }
        });

        wristUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-090.png"))); // NOI18N
        wristUpButton.setText("E");
        wristUpButton.setToolTipText("Wrist Up");
        wristUpButton.setMaximumSize(new java.awt.Dimension(70, 50));
        wristUpButton.setMinimumSize(new java.awt.Dimension(70, 50));
        wristUpButton.setPreferredSize(new java.awt.Dimension(70, 50));
        wristUpButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                wristUpButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                wristUpButtonMouseReleased(evt);
            }
        });

        elbowUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-090.png"))); // NOI18N
        elbowUpButton.setText("R");
        elbowUpButton.setToolTipText("Elbow Up");
        elbowUpButton.setMaximumSize(new java.awt.Dimension(70, 50));
        elbowUpButton.setMinimumSize(new java.awt.Dimension(70, 50));
        elbowUpButton.setPreferredSize(new java.awt.Dimension(70, 50));
        elbowUpButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                elbowUpButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                elbowUpButtonMouseReleased(evt);
            }
        });

        elbowDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-270.png"))); // NOI18N
        elbowDownButton.setText("F");
        elbowDownButton.setToolTipText("Elbow Down");
        elbowDownButton.setMaximumSize(new java.awt.Dimension(70, 50));
        elbowDownButton.setMinimumSize(new java.awt.Dimension(70, 50));
        elbowDownButton.setPreferredSize(new java.awt.Dimension(70, 50));
        elbowDownButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                elbowDownButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                elbowDownButtonMouseReleased(evt);
            }
        });

        shoulderDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-270.png"))); // NOI18N
        shoulderDownButton.setText("J");
        shoulderDownButton.setToolTipText("Shoulder Down");
        shoulderDownButton.setMaximumSize(new java.awt.Dimension(70, 50));
        shoulderDownButton.setMinimumSize(new java.awt.Dimension(70, 50));
        shoulderDownButton.setPreferredSize(new java.awt.Dimension(70, 50));
        shoulderDownButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                shoulderDownButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                shoulderDownButtonMouseReleased(evt);
            }
        });

        shoulderUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-curve-090.png"))); // NOI18N
        shoulderUpButton.setText("U");
        shoulderUpButton.setToolTipText("Shoulder Up");
        shoulderUpButton.setMaximumSize(new java.awt.Dimension(70, 50));
        shoulderUpButton.setMinimumSize(new java.awt.Dimension(70, 50));
        shoulderUpButton.setPreferredSize(new java.awt.Dimension(70, 50));
        shoulderUpButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                shoulderUpButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                shoulderUpButtonMouseReleased(evt);
            }
        });

        baseAntiClockwiseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-circle-anticlockwise.png"))); // NOI18N
        baseAntiClockwiseButton.setText("K");
        baseAntiClockwiseButton.setToolTipText("Base Anti Clockwise");
        baseAntiClockwiseButton.setMaximumSize(new java.awt.Dimension(70, 50));
        baseAntiClockwiseButton.setMinimumSize(new java.awt.Dimension(70, 50));
        baseAntiClockwiseButton.setPreferredSize(new java.awt.Dimension(70, 50));
        baseAntiClockwiseButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                baseAntiClockwiseButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                baseAntiClockwiseButtonMouseReleased(evt);
            }
        });

        baseClockwiseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/arrow-circle.png"))); // NOI18N
        baseClockwiseButton.setText("I");
        baseClockwiseButton.setToolTipText("Base Clockwise");
        baseClockwiseButton.setMaximumSize(new java.awt.Dimension(70, 50));
        baseClockwiseButton.setMinimumSize(new java.awt.Dimension(70, 50));
        baseClockwiseButton.setPreferredSize(new java.awt.Dimension(70, 50));
        baseClockwiseButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                baseClockwiseButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                baseClockwiseButtonMouseReleased(evt);
            }
        });

        toggleModeButton.setText("MODE");
        toggleModeButton.setToolTipText("Toggle Mode");
        toggleModeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                toggleModeButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/cross.png"))); // NOI18N
        closeButton.setText("CLOSE");
        closeButton.setToolTipText("Close");
        closeButton.setMaximumSize(new java.awt.Dimension(70, 50));
        closeButton.setMinimumSize(new java.awt.Dimension(70, 50));
        closeButton.setPreferredSize(new java.awt.Dimension(70, 50));
        closeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeButtonActionPerformed(evt);
            }
        });

        basicModeLabel.setText("BASIC MODE");
        basicModeLabel.setToolTipText("Basic Mode");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        armImagePanel.setBackground(new java.awt.Color(255, 128, 0));
        armImagePanel.setMaximumSize(new java.awt.Dimension(647, 42));
        armImagePanel.setMinimumSize(new java.awt.Dimension(647, 42));

        outputLabel.setText("jLabel1");

        javax.swing.GroupLayout armImagePanelLayout = new javax.swing.GroupLayout(armImagePanel);
        armImagePanel.setLayout(armImagePanelLayout);
        armImagePanelLayout.setHorizontalGroup(
            armImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, armImagePanelLayout.createSequentialGroup()
                .addContainerGap(198, Short.MAX_VALUE)
                .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(200, 200, 200))
        );
        armImagePanelLayout.setVerticalGroup(
            armImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(armImagePanelLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(outputLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        armStatusLabel.setText("Not Connected");

        lightToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/light-bulb-off.png"))); // NOI18N
        lightToggleButton.setText("L");
        lightToggleButton.setToolTipText("Light On");
        lightToggleButton.setMaximumSize(new java.awt.Dimension(70, 50));
        lightToggleButton.setMinimumSize(new java.awt.Dimension(70, 50));
        lightToggleButton.setPreferredSize(new java.awt.Dimension(70, 50));
        lightToggleButton.setRolloverEnabled(false);
        lightToggleButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/robotarmedge/resources/light-bulb.png"))); // NOI18N
        lightToggleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lightToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(armImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(basicModeLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(toggleModeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(closeGripperButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openGripperButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(wristDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wristUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(elbowDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(elbowUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(shoulderDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shoulderUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(baseAntiClockwiseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(baseClockwiseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lightToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(armStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(basicModeLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 337, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(armImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(baseAntiClockwiseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(elbowUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(elbowDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(wristUpButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(closeGripperButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(wristDownButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(openGripperButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(toggleModeButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(shoulderUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(baseClockwiseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(armStatusLabel))
                                    .addGap(18, 18, 18)
                                    .addComponent(shoulderDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lightToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * ************************************************************************* 
     * Private Event Handlers
     * *************************************************************************
     */
    
    private void toggleModeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_toggleModeButtonActionPerformed
    {//GEN-HEADEREND:event_toggleModeButtonActionPerformed
        this.outputLabel.setText("Mode changed.");
    }//GEN-LAST:event_toggleModeButtonActionPerformed

    private void closeGripperButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_closeGripperButtonMousePressed
    {//GEN-HEADEREND:event_closeGripperButtonMousePressed
        this.outputLabel.setText("Gripper Close Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.closeGripper();
        }
    }//GEN-LAST:event_closeGripperButtonMousePressed

    private void closeGripperButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_closeGripperButtonMouseReleased
    {//GEN-HEADEREND:event_closeGripperButtonMouseReleased
        this.outputLabel.setText("Gripper Close Released");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopGripper();
        }
    }//GEN-LAST:event_closeGripperButtonMouseReleased

    private void openGripperButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_openGripperButtonMousePressed
    {//GEN-HEADEREND:event_openGripperButtonMousePressed
        this.outputLabel.setText("Gripper Open Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.openGripper();
        }
    }//GEN-LAST:event_openGripperButtonMousePressed

    private void openGripperButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_openGripperButtonMouseReleased
    {//GEN-HEADEREND:event_openGripperButtonMouseReleased
        this.outputLabel.setText("Gripper Open Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopGripper();
        }
    }//GEN-LAST:event_openGripperButtonMouseReleased

    private void wristUpButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_wristUpButtonMousePressed
    {//GEN-HEADEREND:event_wristUpButtonMousePressed
        this.outputLabel.setText("Wrist Up Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.moveWristUp();
        }
    }//GEN-LAST:event_wristUpButtonMousePressed

    private void wristUpButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_wristUpButtonMouseReleased
    {//GEN-HEADEREND:event_wristUpButtonMouseReleased
        this.outputLabel.setText("Wrist Up Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopWrist();
        }
    }//GEN-LAST:event_wristUpButtonMouseReleased

    private void wristDownButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_wristDownButtonMousePressed
    {//GEN-HEADEREND:event_wristDownButtonMousePressed
        this.outputLabel.setText("Wrist Down Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.moveWristDown();
        }
    }//GEN-LAST:event_wristDownButtonMousePressed

    private void wristDownButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_wristDownButtonMouseReleased
    {//GEN-HEADEREND:event_wristDownButtonMouseReleased
       this.outputLabel.setText("Wrist Down Released.");
       
       if (this.usbRobotArm.isAttached())
       {
            this.usbRobotArm.stopWrist();
       }
    }//GEN-LAST:event_wristDownButtonMouseReleased

    private void elbowUpButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_elbowUpButtonMousePressed
    {//GEN-HEADEREND:event_elbowUpButtonMousePressed
        this.outputLabel.setText("Elbow Up Pressed.");
        
        if (this.usbRobotArm.isAttached())
       {
            this.usbRobotArm.moveElbowUp();
       }
    }//GEN-LAST:event_elbowUpButtonMousePressed

    private void elbowUpButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_elbowUpButtonMouseReleased
    {//GEN-HEADEREND:event_elbowUpButtonMouseReleased
        this.outputLabel.setText("Elbow Up Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopElbow();
        }
    }//GEN-LAST:event_elbowUpButtonMouseReleased

    private void elbowDownButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_elbowDownButtonMousePressed
    {//GEN-HEADEREND:event_elbowDownButtonMousePressed
        this.outputLabel.setText("Elbow Down Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.moveElbowDown();
        }
    }//GEN-LAST:event_elbowDownButtonMousePressed

    private void elbowDownButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_elbowDownButtonMouseReleased
    {//GEN-HEADEREND:event_elbowDownButtonMouseReleased
        this.outputLabel.setText("Elbow Down Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopElbow();
        }
    }//GEN-LAST:event_elbowDownButtonMouseReleased

    private void shoulderUpButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_shoulderUpButtonMousePressed
    {//GEN-HEADEREND:event_shoulderUpButtonMousePressed
        this.outputLabel.setText("Shoulder Up Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.moveShoulderUp();
        }
    }//GEN-LAST:event_shoulderUpButtonMousePressed

    private void shoulderUpButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_shoulderUpButtonMouseReleased
    {//GEN-HEADEREND:event_shoulderUpButtonMouseReleased
        this.outputLabel.setText("Shoulder Up Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopShoulder();
        }
    }//GEN-LAST:event_shoulderUpButtonMouseReleased

    private void shoulderDownButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_shoulderDownButtonMousePressed
    {//GEN-HEADEREND:event_shoulderDownButtonMousePressed
        this.outputLabel.setText("Shoulder Down Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.moveShoulderDown();
        }
    }//GEN-LAST:event_shoulderDownButtonMousePressed

    private void shoulderDownButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_shoulderDownButtonMouseReleased
    {//GEN-HEADEREND:event_shoulderDownButtonMouseReleased
        this.outputLabel.setText("Shoulder Down Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopShoulder();
        }
    }//GEN-LAST:event_shoulderDownButtonMouseReleased

    private void baseClockwiseButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_baseClockwiseButtonMousePressed
    {//GEN-HEADEREND:event_baseClockwiseButtonMousePressed
        this.outputLabel.setText("Base Clockwise Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.rotateBaseClockwise();
        }
    }//GEN-LAST:event_baseClockwiseButtonMousePressed

    private void baseClockwiseButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_baseClockwiseButtonMouseReleased
    {//GEN-HEADEREND:event_baseClockwiseButtonMouseReleased
        this.outputLabel.setText("Base Clockwise Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopBase();
        }
    }//GEN-LAST:event_baseClockwiseButtonMouseReleased

    private void baseAntiClockwiseButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_baseAntiClockwiseButtonMousePressed
    {//GEN-HEADEREND:event_baseAntiClockwiseButtonMousePressed
        this.outputLabel.setText("Base Anti-Clockwise Pressed.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.rotateBaseAntiClockwise();
        }
    }//GEN-LAST:event_baseAntiClockwiseButtonMousePressed

    private void baseAntiClockwiseButtonMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_baseAntiClockwiseButtonMouseReleased
    {//GEN-HEADEREND:event_baseAntiClockwiseButtonMouseReleased
        this.outputLabel.setText("Base Anti-Clockwise Released.");
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.stopBase();
        }
    }//GEN-LAST:event_baseAntiClockwiseButtonMouseReleased

    private void lightToggleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lightToggleButtonActionPerformed
    {//GEN-HEADEREND:event_lightToggleButtonActionPerformed
        JToggleButton toggleButton = (JToggleButton)evt.getSource();
        this.outputLabel.setText("Light State: " + toggleButton.isSelected());
        
        if (this.usbRobotArm.isAttached())
        {
            this.usbRobotArm.toggleLight(toggleButton.isSelected());
        }
    }//GEN-LAST:event_lightToggleButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
    {//GEN-HEADEREND:event_closeButtonActionPerformed
        this.outputLabel.setText("Close Pressed.");
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(BasicMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(BasicMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(BasicMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(BasicMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new BasicMode().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel armImagePanel;
    private javax.swing.JLabel armStatusLabel;
    private javax.swing.JButton baseAntiClockwiseButton;
    private javax.swing.JButton baseClockwiseButton;
    private javax.swing.JLabel basicModeLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton closeGripperButton;
    private javax.swing.JButton elbowDownButton;
    private javax.swing.JButton elbowUpButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JToggleButton lightToggleButton;
    private javax.swing.JButton openGripperButton;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton shoulderDownButton;
    private javax.swing.JButton shoulderUpButton;
    private javax.swing.JButton toggleModeButton;
    private javax.swing.JButton wristDownButton;
    private javax.swing.JButton wristUpButton;
    // End of variables declaration//GEN-END:variables

}
